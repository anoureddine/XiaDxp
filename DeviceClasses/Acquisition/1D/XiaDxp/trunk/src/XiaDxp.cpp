static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         XiaDxp.cpp
//
// description :  C++ source for the XiaDxp and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                XiaDxp are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name      |  Method name
//	----------------------------------------
//  State             |  dev_state()
//  Status            |  dev_status()
//  Snap              |  snap()
//  Stop              |  stop()
//  LoadConfigFile    |  load_config_file()
//  SaveConfigFile    |  save_config_file()
//  SetRoisFromList   |  set_rois_from_list()
//  SetRoisFromFile   |  set_rois_from_file()
//  GetRois           |  get_rois()
//  RemoveRois        |  remove_rois()
//  StreamResetIndex  |  stream_reset_index()
//  GetDataStreams    |  get_data_streams()
//
//===================================================================


#include <tango.h>
#include <PogoHelper.h>

#include <vector>
#include <string>
#include <map>

#include <XiaDxp.h>
#include <XiaDxpClass.h>
#include <yat/threading/Thread.h>

using namespace std;

namespace XiaDxp_ns
{

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::XiaDxp(string &s)
// 
// description : 	constructor for simulated XiaDxp
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
XiaDxp::XiaDxp(Tango::DeviceClass *cl, string &s)
:Tango::Device_4Impl(cl, s.c_str())
{
    init_device();
}
XiaDxp::XiaDxp(Tango::DeviceClass *cl, const char *s)
:Tango::Device_4Impl(cl, s)
{
    init_device();
}
XiaDxp::XiaDxp(Tango::DeviceClass *cl, const char *s, const char *d)
:Tango::Device_4Impl(cl, s, d)
{
    init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void XiaDxp::delete_device()
{
    INFO_STREAM << "XiaDxp::XiaDxp() delete device " << device_name << endl;
    //	Delete device allocated objects
    DELETE_SCALAR_ATTRIBUTE(attr_nbModules_read);
    DELETE_SCALAR_ATTRIBUTE(attr_nbChannels_read);
    DELETE_SCALAR_ATTRIBUTE(attr_nbBins_read);
    DELETE_SCALAR_ATTRIBUTE(attr_peakingTime_read);
    DELETE_SCALAR_ATTRIBUTE(attr_dynamicRange_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_currentAlias_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_currentMode_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_currentConfigFile_read);

    //remove controller
    m_controller.reset();

    m_map_alias_configuration_files.clear();
    m_map_alias_rois_files.clear();

    //- remove the inner-appender
    INFO_STREAM << "Remove the InnerAppender." << endl;
    yat4tango::InnerAppender::release(this);

    INFO_STREAM << "Remove the YatLogAdapter." << endl;
    yat4tango::YatLogAdapter::release();

    INFO_STREAM << "Remove the DeviceInfo." << endl;
    yat4tango::DeviceInfo::release(this);
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void XiaDxp::init_device()
{
    INFO_STREAM << "XiaDxp::XiaDxp() create device " << device_name << endl;

    CREATE_SCALAR_ATTRIBUTE(attr_nbModules_read, (Tango::DevLong)0);
    CREATE_SCALAR_ATTRIBUTE(attr_nbChannels_read, (Tango::DevLong)0);
    CREATE_SCALAR_ATTRIBUTE(attr_nbBins_read, (Tango::DevLong)0);
    CREATE_SCALAR_ATTRIBUTE(attr_peakingTime_read, (Tango::DevDouble)0);
    CREATE_SCALAR_ATTRIBUTE(attr_dynamicRange_read, (Tango::DevDouble)0);
    CREATE_DEVSTRING_ATTRIBUTE(attr_currentAlias_read, 255);
    CREATE_DEVSTRING_ATTRIBUTE(attr_currentMode_read, 255);
    CREATE_DEVSTRING_ATTRIBUTE(attr_currentConfigFile_read, 255);

    // Initialise variables to default values
    //--------------------------------------------
    get_device_property();
    m_is_device_initialized = false;
    m_status_message.str("");
    set_state(Tango::INIT);

    //---------------------------------------------------------
    //- instanciate the log_adapter & inner_appender in order to manage logs
    //---------------------------------------------------------
    try
    {
        INFO_STREAM << "- Create the YatLogAdapter in order to use logs from third party library." << endl;
        yat4tango::YatLogAdapter::initialize(this);

        INFO_STREAM << "- Create the InnerAppender in order to manage logs." << endl;
        yat4tango::InnerAppender::initialize(this, 1024);

        INFO_STREAM << "- Create the DeviceInfo in order to display dependencies versions." << endl;
        yat4tango::DeviceInfo::initialize(this, YAT_XSTR(PROJECT_NAME), YAT_XSTR(PROJECT_VERSION) );
        yat4tango::DeviceInfo::add_dependency(this, "NEXUSCPP", YAT_XSTR(NEXUSCPP_VERSION));
        yat4tango::DeviceInfo::add_dependency(this, "HANDEL", YAT_XSTR(HANDEL_VERSION));
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        m_status_message << "Initialization Failed.\n" << endl;
        m_status_message << "Origin\t: " << df.errors[0].origin << endl;
        m_status_message << "Desc\t: " << df.errors[0].desc << endl;
        return;
    }

    //---------------------------------------------------------
    //- Prepare alias for each configuration file
    //---------------------------------------------------------
    INFO_STREAM << "- Prepare alias for each configuration file" << endl;
    for (size_t i = 0; i < configurationFiles.size(); i++)
    {
        yat::StringTokenizer config_files(configurationFiles.at(i), ";");
        string alias                = config_files.next_token();
        string mode                 = config_files.next_token();
        string file_name            = config_files.next_token();
        tModeAndFile mode_and_file  = {mode, file_name};
        std::transform(alias.begin(), alias.end(), alias.begin(), ::toupper);
        m_map_alias_configuration_files.insert(make_pair(alias, mode_and_file));
        INFO_STREAM << "  [alias : " << alias << "] = mode : " << mode << " , file : " << file_name << endl;
    }


    //---------------------------------------------------------
    //- Prepare alias for each rois file
    //---------------------------------------------------------
    INFO_STREAM << "- Prepare alias for each rois file" << endl;
    for (size_t i = 0; i < roisFiles.size(); i++)
    {
        yat::StringTokenizer rois_files(roisFiles.at(i), ";");
        string alias                = rois_files.next_token();
        string file_name            = rois_files.next_token();
        std::transform(alias.begin(), alias.end(), alias.begin(), ::toupper);
        m_map_alias_rois_files.insert(make_pair(alias, file_name));
        INFO_STREAM << "  [alias : " << alias << "] = file : " << file_name << endl;
    }


    try
    {
        INFO_STREAM << "- Create the Controller Task" << endl;
        std::transform(boardType.begin(), boardType.end(), boardType.begin(), ::toupper);
        for (int i = 0; i < streamItems.size(); i++)
        {
            std::transform(streamItems.at(i).begin(), streamItems.at(i).end(), streamItems.at(i).begin(), ::tolower);
        }

        m_conf.board_type = boardType;
        m_conf.board_timebase = boardTimebase;
        m_conf.acquisition_mode = m_map_alias_configuration_files[__MemorizedConfigurationAlias].mode;
        m_conf.acquisition_file = m_map_alias_configuration_files[__MemorizedConfigurationAlias].file;
        m_conf.stream_type = __MemorizedStreamType;
        m_conf.stream_path = __MemorizedStreamTargetPath;
        m_conf.stream_file = __MemorizedStreamTargetFile;
        m_conf.stream_write_mode = __ExpertStreamWriteMode;
        m_conf.stream_items = streamItems;
        m_conf.stream_nb_data_per_acq = __MemorizedStreamNbDataPerAcq;
        m_conf.stream_nb_acq_per_file = __MemorizedStreamNbAcqPerFile;
        m_conf.is_device_initialized = is_device_initialized();
        m_controller.reset(new Controller(this, m_conf), yat4tango::DeviceTaskExiter());
        m_controller->go(); //- post the INIT msg         
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        m_status_message << "Initialization Failed.\n" << endl;
        m_status_message << "Origin\t: " << df.errors[0].origin << endl;
        m_status_message << "Desc\t: " << df.errors[0].desc << endl;
        return;
    }
    catch (...)
    {
        ERROR_STREAM << "Initialization Failed while trying to create the Controller object !\n" << endl;
        m_status_message << "Initialization Failed while trying to create the Controller object !\n" << endl;
        return;
    }

    m_is_device_initialized = true;

    //write at init, only if device is correctly initialized
    if (m_is_device_initialized)
    {
        try
        {
            m_is_device_initialized = false;
            
            INFO_STREAM << "- Write tango hardware at Init - streamType" << endl;
            Tango::WAttribute &streamType = dev_attr->get_w_attr_by_name("streamType");
            attr_streamType_write = const_cast<Tango::DevString> (__MemorizedStreamType.c_str());
            streamType.set_write_value(attr_streamType_write);
            write_streamType(streamType);

            INFO_STREAM << "- Write tango hardware at Init - streamTargetPath" << endl;
            Tango::WAttribute &streamTargetPath = dev_attr->get_w_attr_by_name("streamTargetPath");
            attr_streamTargetPath_write = const_cast<Tango::DevString> (__MemorizedStreamTargetPath.c_str());
            streamTargetPath.set_write_value(attr_streamTargetPath_write);
            write_streamTargetPath(streamTargetPath);

            INFO_STREAM << "- Write tango hardware at Init - streamTargetFile" << endl;
            Tango::WAttribute &streamTargetFile = dev_attr->get_w_attr_by_name("streamTargetFile");
            attr_streamTargetFile_write = const_cast<Tango::DevString> (__MemorizedStreamTargetFile.c_str());
            streamTargetFile.set_write_value(attr_streamTargetFile_write);
            write_streamTargetFile(streamTargetFile);

            INFO_STREAM << "- Write tango hardware at Init - streamNbAcqPerFile" << endl;
            Tango::WAttribute &streamNbAcqPerFile = dev_attr->get_w_attr_by_name("streamNbAcqPerFile");
            attr_streamNbAcqPerFile_write = __MemorizedStreamNbAcqPerFile;
            streamNbAcqPerFile.set_write_value(attr_streamNbAcqPerFile_write);
            write_streamNbAcqPerFile(streamNbAcqPerFile);

            INFO_STREAM << "- Write tango hardware at Init - streamNbDataPerAcq" << endl;
            Tango::WAttribute &streamNbDataPerAcq = dev_attr->get_w_attr_by_name("streamNbDataPerAcq");
            attr_streamNbDataPerAcq_write = __MemorizedStreamNbDataPerAcq;
            streamNbDataPerAcq.set_write_value(attr_streamNbDataPerAcq_write);
            write_streamNbDataPerAcq(streamNbDataPerAcq);
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            m_status_message << "Initialization Failed.\n" << endl;
            m_status_message << "Origin\t: " << df.errors[0].origin << endl;
            m_status_message << "Desc\t: " << df.errors[0].desc << endl;
            return;
        }
    }
    
    m_is_device_initialized = true;
    set_state(Tango::OFF);
    dev_state();
}


//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void XiaDxp::get_device_property()
{
    //	Initialize your default values here (if not done with  POGO).
    //------------------------------------------------------------------

    //	Read device properties from database.(Automatic code generation)
    //------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("BoardType"));
	dev_prop.push_back(Tango::DbDatum("BoardTimebase"));
	dev_prop.push_back(Tango::DbDatum("ConfigurationFiles"));
	dev_prop.push_back(Tango::DbDatum("RoisFiles"));
	dev_prop.push_back(Tango::DbDatum("StreamItems"));
	dev_prop.push_back(Tango::DbDatum("SpoolID"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedConfigurationAlias"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedRoisAlias"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedNumChannel"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedPresetType"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedPresetValue"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedStreamType"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedStreamTargetPath"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedStreamTargetFile"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedStreamNbDataPerAcq"));
	dev_prop.push_back(Tango::DbDatum("__MemorizedStreamNbAcqPerFile"));
	dev_prop.push_back(Tango::DbDatum("__ExpertStreamWriteMode"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	XiaDxpClass	*ds_class =
		(static_cast<XiaDxpClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize BoardType from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  boardType;
	else {
		//	Try to initialize BoardType from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  boardType;
	}
	//	And try to extract BoardType value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  boardType;

	//	Try to initialize BoardTimebase from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  boardTimebase;
	else {
		//	Try to initialize BoardTimebase from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  boardTimebase;
	}
	//	And try to extract BoardTimebase value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  boardTimebase;

	//	Try to initialize ConfigurationFiles from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  configurationFiles;
	else {
		//	Try to initialize ConfigurationFiles from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  configurationFiles;
	}
	//	And try to extract ConfigurationFiles value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configurationFiles;

	//	Try to initialize RoisFiles from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  roisFiles;
	else {
		//	Try to initialize RoisFiles from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  roisFiles;
	}
	//	And try to extract RoisFiles value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  roisFiles;

	//	Try to initialize StreamItems from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  streamItems;
	else {
		//	Try to initialize StreamItems from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  streamItems;
	}
	//	And try to extract StreamItems value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  streamItems;

	//	Try to initialize SpoolID from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  spoolID;
	else {
		//	Try to initialize SpoolID from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  spoolID;
	}
	//	And try to extract SpoolID value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  spoolID;

	//	Try to initialize __MemorizedConfigurationAlias from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedConfigurationAlias;
	else {
		//	Try to initialize __MemorizedConfigurationAlias from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedConfigurationAlias;
	}
	//	And try to extract __MemorizedConfigurationAlias value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedConfigurationAlias;

	//	Try to initialize __MemorizedRoisAlias from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedRoisAlias;
	else {
		//	Try to initialize __MemorizedRoisAlias from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedRoisAlias;
	}
	//	And try to extract __MemorizedRoisAlias value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedRoisAlias;

	//	Try to initialize __MemorizedNumChannel from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedNumChannel;
	else {
		//	Try to initialize __MemorizedNumChannel from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedNumChannel;
	}
	//	And try to extract __MemorizedNumChannel value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedNumChannel;

	//	Try to initialize __MemorizedPresetType from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedPresetType;
	else {
		//	Try to initialize __MemorizedPresetType from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedPresetType;
	}
	//	And try to extract __MemorizedPresetType value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedPresetType;

	//	Try to initialize __MemorizedPresetValue from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedPresetValue;
	else {
		//	Try to initialize __MemorizedPresetValue from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedPresetValue;
	}
	//	And try to extract __MemorizedPresetValue value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedPresetValue;

	//	Try to initialize __MemorizedStreamType from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedStreamType;
	else {
		//	Try to initialize __MemorizedStreamType from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedStreamType;
	}
	//	And try to extract __MemorizedStreamType value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedStreamType;

	//	Try to initialize __MemorizedStreamTargetPath from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedStreamTargetPath;
	else {
		//	Try to initialize __MemorizedStreamTargetPath from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedStreamTargetPath;
	}
	//	And try to extract __MemorizedStreamTargetPath value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedStreamTargetPath;

	//	Try to initialize __MemorizedStreamTargetFile from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedStreamTargetFile;
	else {
		//	Try to initialize __MemorizedStreamTargetFile from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedStreamTargetFile;
	}
	//	And try to extract __MemorizedStreamTargetFile value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedStreamTargetFile;

	//	Try to initialize __MemorizedStreamNbDataPerAcq from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedStreamNbDataPerAcq;
	else {
		//	Try to initialize __MemorizedStreamNbDataPerAcq from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedStreamNbDataPerAcq;
	}
	//	And try to extract __MemorizedStreamNbDataPerAcq value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedStreamNbDataPerAcq;

	//	Try to initialize __MemorizedStreamNbAcqPerFile from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __MemorizedStreamNbAcqPerFile;
	else {
		//	Try to initialize __MemorizedStreamNbAcqPerFile from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __MemorizedStreamNbAcqPerFile;
	}
	//	And try to extract __MemorizedStreamNbAcqPerFile value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __MemorizedStreamNbAcqPerFile;

	//	Try to initialize __ExpertStreamWriteMode from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  __ExpertStreamWriteMode;
	else {
		//	Try to initialize __ExpertStreamWriteMode from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  __ExpertStreamWriteMode;
	}
	//	And try to extract __ExpertStreamWriteMode value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  __ExpertStreamWriteMode;



    //	End of Automatic code generation
    //------------------------------------------------------------------
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "XMAP", "BoardType");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "0.000000320", "BoardTimebase");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "ALIAS;MODE;FILE_PATH_NAME", "ConfigurationFiles");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "TO_BE_DEFINED", "__MemorizedConfigurationAlias");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "ALIAS;FILE_PATH_NAME", "RoisFiles");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "CHANNEL", "StreamItems");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "TO_BE_DEFINED", "SpoolID");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "TO_BE_DEFINED", "__MemorizedRoisAlias");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "-1", "__MemorizedNumChannel");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "FIXED_REAL", "__MemorizedPresetType");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "1", "__MemorizedPresetValue");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "LOG_STREAM", "StreamType");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "TO_BE_DEFINED", "__MemorizedStreamTargetPath");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "TO_BE_DEFINED", "__MemorizedStreamTargetFile");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "2048", "__MemorizedStreamNbDataPerAcq");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "1", "__MemorizedStreamNbAcqPerFile");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "IMMEDIATE", "__ExpertStreamWriteMode");
}
//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void XiaDxp::always_executed_hook()
{
    try
    {
        dev_state();
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::always_executed_hook()");
    }
}
//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_attr_hardware(vector<long> &attr_list)
{
    //DEBUG_STREAM << "XiaDxp::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
    //	Add your own code here
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_nbModules
// 
// description : 	Extract real attribute values for nbModules acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_nbModules(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_nbModules(Tango::Attribute &attr) entering... " << endl;
    try
    {
        *attr_nbModules_read = m_controller->get_nb_modules();
        attr.set_value(attr_nbModules_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::read_nbModules()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_nbChannels
// 
// description : 	Extract real attribute values for nbChannels acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_nbChannels(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_nbChannels(Tango::Attribute &attr) entering... " << endl;
    try
    {
        *attr_nbChannels_read = m_controller->get_nb_channels();
        attr.set_value(attr_nbChannels_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::read_nbChannels()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_nbBins
// 
// description : 	Extract real attribute values for nbBins acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_nbBins(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_nbBins(Tango::Attribute &attr) entering... " << endl;
    try
    {
        *attr_nbBins_read = m_controller->get_nb_bins();
        attr.set_value(attr_nbBins_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::read_nbBins()");
    }
}


//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_currentAlias
// 
// description : 	Extract real attribute values for currentAlias acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_currentAlias(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_currentAlias(Tango::Attribute &attr) entering... " << endl;
    try
    {
        attr.set_value(attr_currentAlias_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::read_currentAlias()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_currentMode
// 
// description : 	Extract real attribute values for currentMode acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_currentMode(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_currentMode(Tango::Attribute &attr) entering... " << endl;
    try
    {
        attr.set_value(attr_currentMode_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::read_currentMode()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_currentConfigFile
// 
// description : 	Extract real attribute values for currentConfigFile acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_currentConfigFile(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_currentConfigFile(Tango::Attribute &attr) entering... " << endl;
    try
    {
        attr.set_value(attr_currentConfigFile_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::read_currentConfig()");
    }
}



//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_peakingTime
// 
// description : 	Extract real attribute values for peakingTime acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_peakingTime(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_peakingTime(Tango::Attribute &attr) entering... " << endl;
    try
    {
        *attr_peakingTime_read = m_controller->get_peaking_time();
        attr.set_value(attr_peakingTime_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;

        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::attr_peakingTime_read()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_dynamicRange
// 
// description : 	Extract real attribute values for dynamicRange acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_dynamicRange(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_dynamicRange(Tango::Attribute &attr) entering... " << endl;
    try
    {
        *attr_dynamicRange_read = m_controller->get_dynamic_range();
        attr.set_value(attr_dynamicRange_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;

        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::attr_dynamicRange_read()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_streamType
// 
// description : 	Extract real attribute values for streamType acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_streamType(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_streamType(Tango::Attribute &attr) entering... " << endl;
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::write_streamType
// 
// description : 	Write streamType attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XiaDxp::write_streamType(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "XiaDxp::write_streamType(Tango::WAttribute &attr) entering... " << endl;
    try
    {
        attr.get_write_value(attr_streamType_write);
        std::string currentType = attr_streamType_write;
        std::transform(currentType.begin(), currentType.end(), currentType.begin(), ::toupper);

        if ((currentType != "NO_STREAM") && (currentType != "LOG_STREAM") && (currentType != "CSV_STREAM") && (currentType != "NEXUS_STREAM") )
        {
            Tango::Except::throw_exception("DEVICE_ERROR",
                                           "Wrong Stream Type:\n"
                                           "Possibles values are:\n"
                                           "NO_STREAM\n"
                                           "LOG_STREAM\n"
                                           "CSV_STREAM\n"
                                           "NEXUS_STREAM",
                                           "XiaDxp::write_streamType()");
        }

        m_conf.stream_type = currentType;
        yat4tango::PropertyHelper::set_property(this, "__MemorizedStreamType", attr_streamType_write);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::write_streamType()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_streamTargetPath
// 
// description : 	Extract real attribute values for streamTargetPath acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_streamTargetPath(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_streamTargetPath(Tango::Attribute &attr) entering... " << endl;
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::write_streamTargetPath
// 
// description : 	Write streamTargetPath attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XiaDxp::write_streamTargetPath(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "XiaDxp::write_streamTargetPath(Tango::WAttribute &attr) entering... " << endl;
    try
    {
        attr.get_write_value(attr_streamTargetPath_write);
        m_conf.stream_path = attr_streamTargetPath_write;
        yat4tango::PropertyHelper::set_property(this, "__MemorizedStreamTargetPath", attr_streamTargetPath_write);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::write_streamTargetPath()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_streamTargetFile
// 
// description : 	Extract real attribute values for streamTargetFile acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_streamTargetFile(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_streamTargetFile(Tango::Attribute &attr) entering... " << endl;
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::write_streamTargetFile
// 
// description : 	Write streamTargetFile attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XiaDxp::write_streamTargetFile(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "XiaDxp::write_streamTargetFile(Tango::WAttribute &attr) entering... " << endl;
    try
    {
        attr.get_write_value(attr_streamTargetFile_write);
        m_conf.stream_file = attr_streamTargetFile_write;
        yat4tango::PropertyHelper::set_property(this, "__MemorizedStreamTargetFile", attr_streamTargetFile_write);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::write_streamTargetFile()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_streamNbDataPerAcq
// 
// description : 	Extract real attribute values for streamNbDataPerAcq acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_streamNbDataPerAcq(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_streamNbDataPerAcq(Tango::Attribute &attr) entering... " << endl;
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::write_streamNbDataPerAcq
// 
// description : 	Write streamNbDataPerAcq attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XiaDxp::write_streamNbDataPerAcq(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "XiaDxp::write_streamNbDataPerAcq(Tango::WAttribute &attr) entering... " << endl;
    try
    {
        attr.get_write_value(attr_streamNbDataPerAcq_write);
        m_conf.stream_nb_data_per_acq = attr_streamNbDataPerAcq_write;
        yat4tango::PropertyHelper::set_property(this, "__MemorizedStreamNbDataPerAcq", attr_streamNbDataPerAcq_write);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::write_streamNbDataPerAcq()");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::read_streamNbAcqPerFile
// 
// description : 	Extract real attribute values for streamNbAcqPerFile acquisition result.
//
//-----------------------------------------------------------------------------
void XiaDxp::read_streamNbAcqPerFile(Tango::Attribute &attr)
{
    DEBUG_STREAM << "XiaDxp::read_streamNbAcqPerFile(Tango::Attribute &attr) entering... " << endl;
}

//+----------------------------------------------------------------------------
//
// method : 		XiaDxp::write_streamNbAcqPerFile
// 
// description : 	Write streamNbAcqPerFile attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XiaDxp::write_streamNbAcqPerFile(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "XiaDxp::write_streamNbAcqPerFile(Tango::WAttribute &attr) entering... " << endl;
    try
    {
        attr.get_write_value(attr_streamNbAcqPerFile_write);
        m_conf.stream_nb_acq_per_file = attr_streamNbAcqPerFile_write;
        yat4tango::PropertyHelper::set_property(this, "__MemorizedStreamNbAcqPerFile", attr_streamNbAcqPerFile_write);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::write_streamNbAcqPerFile()");
    }
}
/*-------------------------------------------------------------------------
//       XiaDxp::is_device_initialized
/-------------------------------------------------------------------------*/
bool XiaDxp::is_device_initialized()
{
    return m_is_device_initialized;
};

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::load_config_file
 *
 *	description:	method to execute "LoadConfigFile"
 *	Load a new config file (.ini)<br>
 *	This will download firmware and initialize the boards/modules in the system<br>
 *
 * @param	argin	
 *
 */
//+------------------------------------------------------------------
void XiaDxp::load_config_file(Tango::DevString argin)
{
    DEBUG_STREAM << "XiaDxp::load_config_file(): entering... !" << endl;
    //	Add your own code to control device here
    try
    {
        //  in the property parser "ALIAS;MCA or MAPPING;c:\mondossier\monfichier.ini"
        std::string alias = argin;
        std::transform(alias.begin(), alias.end(), alias.begin(), ::toupper);
        //check if alias exist !
        map<string, tModeAndFile>::const_iterator it = m_map_alias_configuration_files.find(alias);
        if (it == m_map_alias_configuration_files.end())
        {
            stringstream ss;
            ss << "Unable to find the alias [" << alias << "]" << endl;
            Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                           (ss.str()).c_str(),
                                           "XiaDxp::load_config_file()");
        }

        m_conf.acquisition_mode = m_map_alias_configuration_files[alias].mode;
        m_conf.acquisition_file = m_map_alias_configuration_files[alias].file;

        //refresh the config of parameters of the controller
        m_conf.is_device_initialized = is_device_initialized();
        if (get_state() != Tango::OFF)
        {
            //means that it is not the 1st call of load_config_file()
            //because, we can't call m_stream->init() in controller in the 1st call of load_config_file
            //otherwise m_store is not yet initialized!!
            m_controller->update_parameters(m_conf);
        }

        //ask the controller to load the file on the board
        m_controller->load_config_file(m_conf.acquisition_mode, m_conf.acquisition_file);

        //update attributes related to config ini file
        strcpy(*attr_currentAlias_read, alias.c_str());
        strcpy(*attr_currentMode_read, (m_map_alias_configuration_files[alias].mode).c_str());
        strcpy(*attr_currentConfigFile_read, (m_map_alias_configuration_files[alias].file).c_str());
        yat4tango::PropertyHelper::set_property(this, "__MemorizedConfigurationAlias", alias);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::load_config_file()");
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::save_config_file
 *
 *	description:	method to execute "SaveConfigFile"
 *	Config file (.ini) can be updated at any time using this command.<br>
 *
 *
 */
//+------------------------------------------------------------------
void XiaDxp::save_config_file()
{
    DEBUG_STREAM << "XiaDxp::save_config_file(): entering... !" << endl;

    //	Add your own code to control device here
    try
    {
        //ask the controller to load the file on the board
        m_controller->save_config_file(*attr_currentConfigFile_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::save_config_file()");
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::snap
 *
 *	description:	method to execute "Snap"
 *
 *
 */
//+------------------------------------------------------------------
void XiaDxp::snap()
{
    DEBUG_STREAM << "XiaDxp::snap(): entering... !" << endl;

    //	Add your own code to control device here
    try
    {
        //refresh the config of parameters of the controller
        m_controller->update_parameters(m_conf);
        m_controller->start_acquisition();
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::start()");
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::stop
 *
 *	description:	method to execute "Stop"
 *
 *
 */
//+------------------------------------------------------------------
void XiaDxp::stop()
{
    DEBUG_STREAM << "XiaDxp::stop(): entering... !" << endl;

    //	Add your own code to control device here
    try
    {
        m_controller->stop_acquisition();
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::stop()");
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::set_rois_from_list
 *
 *	description:	method to execute "SetRoisFromList"
 *	....<br>
 *
 * @param	argin	
 *
 */
//+------------------------------------------------------------------
void XiaDxp::set_rois_from_list(const Tango::DevVarStringArray *argin)
{
    DEBUG_STREAM << "XiaDxp::set_rois_from_list(): entering... !" << endl;

    //	Add your own code to control device here
    try
    {
        for (size_t i = 0; i < argin->length(); i++)
        {
            std::string user_input = (*argin)[i];
            set_rois_from_string(user_input);
        }

        //refresh the config of parameters of the controller
        m_controller->update_parameters(m_conf);
        //refresh the tango view
        m_controller->update_view();

        //save rois in the cfg file (*.ini))
        save_config_file();
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::set_rois()");
    }
    return ;
}

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::set_rois_from_file
 *
 *	description:	method to execute "SetRoisFromFile"
 *	....<br>
 *
 * @param	argin	
 *
 */
//+------------------------------------------------------------------
void XiaDxp::set_rois_from_file(Tango::DevString argin)
{
    DEBUG_STREAM << "XiaDxp::set_rois_from_file(): entering... !" << endl;

    //	Add your own code to control device here
    try
    {
        //  in the property parser "ALIAS;c:\mondossier\monfichier.ini"
        string alias = argin;
        std::transform(alias.begin(), alias.end(), alias.begin(), ::toupper);
        //check if alias exist !
        map<string, string>::const_iterator it = m_map_alias_rois_files.find(alias);
        if (it == m_map_alias_rois_files.end())
        {
            stringstream ss;
            ss << "Unable to find the alias [" << alias << "]" << endl;
            Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                           (ss.str()).c_str(),
                                           "XiaDxp::set_rois_from_file()");
        }

        //alias is found, so take the file name
        std::string file_name = m_map_alias_rois_files[alias];
        INFO_STREAM << "file_name = " << file_name << endl;
        yat::File rois_file(file_name);
        std::string file_data;
        rois_file.load((std::string*) & file_data);
        INFO_STREAM << "file_data :" << endl;
        INFO_STREAM << file_data << endl;
        std::vector<std::string> vec_lines;
        yat::StringUtil::split(file_data, '\n', &vec_lines, true);
        for (size_t i = 0; i < vec_lines.size(); i++)
        {
            INFO_STREAM << "line[" << i << "] = " << vec_lines.at(i) << endl;
            std::string user_input = vec_lines.at(i);
            set_rois_from_string(user_input);
        }

        //refresh the config of parameters of the controller
        m_controller->update_parameters(m_conf);
        //refresh the tango view
        m_controller->update_view();

        //save rois in the cfg file (*.ini))
        save_config_file();

        //memorize alias
        yat4tango::PropertyHelper::set_property(this, "__MemorizedRoisAlias", alias);
    }
    catch (yat::Exception& ex)
    {
        //- TODO Error Handling
        ex.dump();
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       ex.errors[0].desc,
                                       "XiaDxp::set_rois_from_file()");
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::set_rois_from_file()");
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::remove_rois
 *
 *	description:	method to execute "RemoveRois"
 *	Remove all Rois for the selected channel.<br>
 *
 * @param	argin	
 *
 */
//+------------------------------------------------------------------
void XiaDxp::remove_rois(Tango::DevLong argin)
{
    DEBUG_STREAM << "XiaDxp::remove_rois(): entering... !" << endl;

    //	Add your own code to control device here
    try
    {
        //put 0 in "number_of_scas"
        m_controller->set_nb_rois(argin, 0);
        //refresh the config of parameters of the controller
        m_controller->update_parameters(m_conf);
        //refresh the tango view
        m_controller->update_view();

        //save rois in the cfg file (*.ini))
        save_config_file();
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::remove_rois()");
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::get_rois
 *
 *	description:	method to execute "GetRois"
 *	....<br>
 *	...<br>
 *
 * @return	
 *
 */
//+------------------------------------------------------------------
Tango::DevVarStringArray *XiaDxp::get_rois()
{
    //	POGO has generated a method core with argout allocation.
    //	If you would like to use a static reference without copying,
    //	See "TANGO Device Server Programmer's Manual"
    //		(chapter : Writing a TANGO DS / Exchanging data)
    //------------------------------------------------------------
    Tango::DevVarStringArray	*argout  = new Tango::DevVarStringArray();

    DEBUG_STREAM << "XiaDxp::get_rois(): entering... !" << endl;

    //	Add your own code to control device here
    ////////////////////////////////////////////////////////////////////////////////////////        
    argout->length(m_controller->get_nb_channels());
    for (int i = 0; i < m_controller->get_nb_channels(); i++)
    {
        std::stringstream ss;
        ss.str("");
        ss << i;
        int nb_rois = m_controller->get_nb_rois(i);
        for (int j = 0; j < nb_rois; j++)
        {
            ss << ";";
            double low = 0, high = 0;
            m_controller->get_roi_bounds(i, j, low, high);
            ss << low << ";" << high;
        }

        (*argout)[i] = CORBA::string_dup(ss.str().c_str());
        DEBUG_STREAM << ss.str().c_str();
    }

    return argout;
}

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
void XiaDxp::set_rois_from_string(const std::string& input)
{
    std::string user_input = input;
    INFO_STREAM << "user_input = " << user_input << endl;
    std::vector<std::string> vec_rois;
    yat::StringUtil::split(user_input, ';', &vec_rois, true);

    //check user input : nb tokens must be ODD (1 channel_number ; low; high; low; high; ....)
    if (vec_rois.size() % 2 == 0)
    {
        stringstream ss;
        ss << "User input must be in the format : 'channel_num; roi0_low; roi0_high; roi1_low; roi1_high; ...'" << endl;
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       (ss.str()).c_str(),
                                       "XiaDxp::set_rois_from_string()");
    }

    //fix nb rois
    int channel_num = yat::StringUtil::to_num<int>(vec_rois.at(0));
    DEBUG_STREAM << "channel_num = " << channel_num << endl;
    int roi_count = (int) ((vec_rois.size() - 1) / 2); //vector size minus channel_num divided by 2 is the roi count		
    DEBUG_STREAM << "roi_count = " << roi_count << endl;
    //put roi_count in "number_of_scas"
    m_controller->set_nb_rois(channel_num, roi_count);

    //for each roi defined par user, fix the low/high on the Xia board
    for (int roi_num = 0; roi_num < roi_count; roi_num++)
    {
        m_controller->set_roi_bounds(channel_num,                                                   //channel
                                     roi_num,                                                       //roi_num
                                     yat::StringUtil::to_num<double>(vec_rois.at(1 + 2 * roi_num)),     //low
                                     yat::StringUtil::to_num<double>(vec_rois.at(1 + 2 * roi_num + 1)));  //high
    }

    INFO_STREAM << " " << endl;
}

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::stream_reset_index
 *
 *	description:	method to execute "StreamResetIndex"
 *	Reset the stream (Nexus) buffer index to 1.
 *
 *
 */
//+------------------------------------------------------------------
void XiaDxp::stream_reset_index()
{
    DEBUG_STREAM << "XiaDxp::stream_reset_index(): entering... !" << endl;

    //	Add your own code to control device here
    try
    {
        //refresh the config of parameters of the controller
        m_controller->update_parameters(m_conf);
        //	Add your own code to control device here
        m_controller->reset_index_stream();
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::stream_reset_buffer_index()");
    }
}


//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::get_data_streams
 *
 *	description:	method to execute "GetDataStreams"
 *	Returns the flyscan data streams associated with this device.
 *
 * @return	
 *
 */
//+------------------------------------------------------------------
Tango::DevString XiaDxp::get_data_streams()
{
    //	POGO has generated a method core with argout allocation.
    //	If you would like to use a static reference without copying,
    //	See "TANGO Device Server Programmer's Manual"
    //		(chapter : Writing a TANGO DS / Exchanging data)
    //------------------------------------------------------------
    DEBUG_STREAM << "XiaDxp::get_data_streams(): entering... !" << endl;

    //	Add your own code to control device here
    int nb_modules  = m_controller->get_nb_modules();
    int length = (nb_modules)?512*nb_modules:512;
    Tango::DevString	argout  = new char[length];
    try
    {
        std::string data_items;
        for (int ichan = 0; ichan < m_controller->get_nb_channels(); ichan++)
        {
            for (int i = 0; i < m_conf.stream_items.size(); i++)
            {
                std::string format = m_conf.stream_items.at(i) + "%02d,";
                data_items += yat::String::str_format(format.c_str(), ichan);
            }
        }

        std::string data_streams = m_conf.stream_file + ":" + data_items + "@" + spoolID;
        INFO_STREAM << "data_streams = " << data_streams << endl;
        strcpy(argout, data_streams.c_str());
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "XiaDxp::get_data_streams()");
    }
    return argout;
}

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
yat::SharedPtr<Controller> XiaDxp::get_ctrl()
{
    return m_controller;
}

//+------------------------------------------------------------------
/**
 *	method:	XiaDxp::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState XiaDxp::dev_state()
{
    ///DEBUG_STREAM << "XiaDxp::dev_state(): entering... !" << endl;
    Tango::DevState	argout ;
    stringstream status;

    //	Add your own code to control device here
    //- Initialisation Failed
    if (!is_device_initialized() )
    {
        set_state(Tango::FAULT);
        argout = Tango::FAULT;
        set_status(m_status_message.str());
        return argout;
    }

    argout = m_controller->get_state();
    status << m_controller->get_status();
    set_state(argout);
    set_status(status.str());
    return argout;
}


}	//	namespace
