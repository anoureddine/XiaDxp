@startuml

title <b>XiaDxp - Diagram Sequence  : Start - 2016/03/23</b>\n**********************************************

actor User

participant "DataStream" as Stream
box "STREAM VIEW" #LightGreen
	participant Stream
end box

participant "Device/AttrView" as Device
box "TANGO VIEW" #LightGreen
	participant Device
end box

participant "Controller" as Ctrl
box "       CONTROLLER      " #Orange
	participant Ctrl
end box

participant "Acquisition" as Acq
participant "DriverHelper" as Driver
participant "DataStore" as Store
box "MODEL" #LightBlue
	participant Acq
	participant Driver
    participant Store
end box


User -> Device: Start()
activate Device

Device -> Ctrl: start()
activate Ctrl

Ctrl -> Acq : start_acquisition()
activate Acq

Acq -> Driver : start_acquisition()
activate Driver

Driver --> Acq 
deactivate Driver

Acq --> Ctrl
deactivate Acq

Ctrl --> Device : state (RUNNING/FAULT/...)
deactivate Ctrl
deactivate Device

note right 
            State = RUNNING will activate the Task Periodic loop
end note

activate Acq

loop while  current_pixel < nbPixels & every 5 ms (PERIODIC Task message) & for each module
            Acq -> Driver : is_buffer_full(module, buffer_A or buffer_B)
            activate Driver
            Driver --> Acq
            deactivate Driver
alt buffer is full

            Acq -> Driver : get_buffer(module, buffer_A or buffer_B)
            activate Driver
            Driver --> Acq : raw data buffer (i.e DataBufferContainer)
            deactivate Driver

            Acq -> Driver : buffer_done(module, buffer_A or buffer_B)
            activate Driver
            Driver --> Acq
            deactivate Driver

            Acq -> Store: process_data(DataBufferContainer)
            activate Store
            Store -> Store: post a MSG in the Task
            activate Store
            deactivate Store
            deactivate Store

            Acq -> Driver : switch_buffer(module)
            activate Driver
            Driver --> Acq
            deactivate Driver
end
            Store -> Store: on_process_data(DataBufferContainer)
            activate Store
note left 
            At each Pull of a DeviceTask MSG of DataStore
            Each pixel of  DataBufferContainer is parsed
            Data statistics & Data bins are extracted for each channel
end note
            
            Store -> Store: store_statistics(num_channel)
            activate Store
            deactivate Store
            Store -> Store: store_data(num_channel)  
            activate Store
            deactivate Store
            Store -> Store : notify(num_channel)
            activate Store

            Store -> Ctrl : update_data(num_channel)
            activate Ctrl #AAEECC

            Ctrl -> Stream : update_data(num_channel)
            activate Stream #AAEECC
note left 
            Push data into Nexus file
end note
            deactivate Stream

            Ctrl -> Device : update_data(num_channel)
            activate Device #AAEECC
note left 
            Update Tango stats/channels dynamic attributes
end note
            deactivate Device
            deactivate Ctrl
            deactivate Store

        end

deactivate Acq

@enduml